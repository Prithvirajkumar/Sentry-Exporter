{"version":3,"file":"propagator.js","sources":["../../src/propagator.ts"],"sourcesContent":["import type { Baggage, Context, TextMapGetter, TextMapSetter } from '@opentelemetry/api';\nimport { TraceFlags, isSpanContextValid, propagation, trace } from '@opentelemetry/api';\nimport { W3CBaggagePropagator, isTracingSuppressed } from '@opentelemetry/core';\nimport { getDynamicSamplingContextFromSpan, getRootSpan, spanToTraceHeader } from '@sentry/core';\nimport {\n  SENTRY_BAGGAGE_KEY_PREFIX,\n  baggageHeaderToDynamicSamplingContext,\n  extractTraceparentData,\n} from '@sentry/utils';\n\nimport {\n  SENTRY_BAGGAGE_HEADER,\n  SENTRY_DYNAMIC_SAMPLING_CONTEXT_KEY,\n  SENTRY_TRACE_HEADER,\n  SENTRY_TRACE_PARENT_CONTEXT_KEY,\n} from './constants';\nimport { getSentrySpan } from './utils/spanMap';\n\n/**\n * Injects and extracts `sentry-trace` and `baggage` headers from carriers.\n */\nexport class SentryPropagator extends W3CBaggagePropagator {\n  /**\n   * @inheritDoc\n   */\n  public inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const spanContext = trace.getSpanContext(context);\n    if (!spanContext || !isSpanContextValid(spanContext) || isTracingSuppressed(context)) {\n      return;\n    }\n\n    let baggage = propagation.getBaggage(context) || propagation.createBaggage({});\n\n    const span = getSentrySpan(spanContext.spanId);\n    if (span) {\n      setter.set(carrier, SENTRY_TRACE_HEADER, spanToTraceHeader(span));\n\n      if (getRootSpan(span)) {\n        const dynamicSamplingContext = getDynamicSamplingContextFromSpan(span);\n        baggage = Object.entries(dynamicSamplingContext).reduce<Baggage>((b, [dscKey, dscValue]) => {\n          if (dscValue) {\n            return b.setEntry(`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`, { value: dscValue });\n          }\n          return b;\n        }, baggage);\n      }\n    }\n    super.inject(propagation.setBaggage(context, baggage), carrier, setter);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    let newContext = context;\n\n    const maybeSentryTraceHeader: string | string[] | undefined = getter.get(carrier, SENTRY_TRACE_HEADER);\n    if (maybeSentryTraceHeader) {\n      const header = Array.isArray(maybeSentryTraceHeader) ? maybeSentryTraceHeader[0] : maybeSentryTraceHeader;\n      const traceparentData = extractTraceparentData(header || '');\n      newContext = newContext.setValue(SENTRY_TRACE_PARENT_CONTEXT_KEY, traceparentData);\n      if (traceparentData) {\n        const spanContext = {\n          traceId: traceparentData.traceId || '',\n          spanId: traceparentData.parentSpanId || '',\n          isRemote: true,\n          // Always sample if traceparent exists, we use SentrySpanProcessor to make sampling decisions with `startTransaction`.\n          traceFlags: TraceFlags.SAMPLED,\n        };\n        newContext = trace.setSpanContext(newContext, spanContext);\n      }\n    }\n\n    const maybeBaggageHeader = getter.get(carrier, SENTRY_BAGGAGE_HEADER);\n    const dynamicSamplingContext = baggageHeaderToDynamicSamplingContext(maybeBaggageHeader);\n    newContext = newContext.setValue(SENTRY_DYNAMIC_SAMPLING_CONTEXT_KEY, dynamicSamplingContext);\n\n    return newContext;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public fields(): string[] {\n    return [SENTRY_TRACE_HEADER, SENTRY_BAGGAGE_HEADER];\n  }\n}\n"],"names":[],"mappings":"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"}