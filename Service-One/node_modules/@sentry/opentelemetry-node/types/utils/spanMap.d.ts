import type { Span as SentrySpan } from '@sentry/types';
interface SpanMapEntry {
    sentrySpan: SentrySpan;
    ref: SpanRefType;
    subSpans: string[];
}
declare const SPAN_REF_ROOT: unique symbol;
declare const SPAN_REF_CHILD: unique symbol;
declare const SPAN_REF_CHILD_ENDED: unique symbol;
type SpanRefType = typeof SPAN_REF_ROOT | typeof SPAN_REF_CHILD | typeof SPAN_REF_CHILD_ENDED;
/** Exported only for tests. */
export declare const SPAN_MAP: Map<string, SpanMapEntry>;
/**
 * Get a Sentry span for a given span ID.
 */
export declare function getSentrySpan(spanId: string): SentrySpan | undefined;
/**
 * Set a Sentry span for a given span ID.
 * This is necessary so we can lookup parent spans later.
 * We also keep a list of children for root spans only, in order to be able to clean them up together.
 */
export declare function setSentrySpan(spanId: string, sentrySpan: SentrySpan): void;
/**
 * Clear references of the given span ID.
 */
export declare function clearSpan(spanId: string): void;
export {};
//# sourceMappingURL=spanMap.d.ts.map