var {
  _optionalChain
} = require('@sentry/utils');

Object.defineProperty(exports, '__esModule', { value: true });

const core = require('@sentry/core');

const SPAN_REF_ROOT = Symbol('root');
const SPAN_REF_CHILD = Symbol('child');
const SPAN_REF_CHILD_ENDED = Symbol('child_ended');

/** Exported only for tests. */
const SPAN_MAP = new Map();

/**
 * Get a Sentry span for a given span ID.
 */
function getSentrySpan(spanId) {
  const entry = SPAN_MAP.get(spanId);
  return entry ? entry.sentrySpan : undefined;
}

/**
 * Set a Sentry span for a given span ID.
 * This is necessary so we can lookup parent spans later.
 * We also keep a list of children for root spans only, in order to be able to clean them up together.
 */
function setSentrySpan(spanId, sentrySpan) {
  let ref = SPAN_REF_ROOT;

  const rootSpanId = _optionalChain([core.getRootSpan, 'call', _ => _(sentrySpan), 'optionalAccess', _2 => _2.spanContext, 'call', _3 => _3(), 'access', _4 => _4.spanId]);

  if (rootSpanId && rootSpanId !== spanId) {
    const root = SPAN_MAP.get(rootSpanId);
    if (root) {
      root.subSpans.push(spanId);
      ref = SPAN_REF_CHILD;
    }
  }

  SPAN_MAP.set(spanId, {
    sentrySpan,
    ref,
    subSpans: [],
  });
}

/**
 * Clear references of the given span ID.
 */
function clearSpan(spanId) {
  const entry = SPAN_MAP.get(spanId);
  if (!entry) {
    return;
  }

  const { ref, subSpans } = entry;

  // If this is a child, mark it as ended.
  if (ref === SPAN_REF_CHILD) {
    entry.ref = SPAN_REF_CHILD_ENDED;
    return;
  }

  // If this is a root span, clear all (ended) children
  if (ref === SPAN_REF_ROOT) {
    for (const childId of subSpans) {
      const child = SPAN_MAP.get(childId);
      if (!child) {
        continue;
      }

      if (child.ref === SPAN_REF_CHILD_ENDED) {
        // if the child has already ended, just clear it
        SPAN_MAP.delete(childId);
      } else if (child.ref === SPAN_REF_CHILD) {
        // If the child has not ended yet, mark it as a root span so it is cleared when it ends.
        child.ref = SPAN_REF_ROOT;
      }
    }

    SPAN_MAP.delete(spanId);
    return;
  }

  // Generally, `clearSpan` should never be called for ref === SPAN_REF_CHILD_ENDED
  // But if it does, just clear the span
  SPAN_MAP.delete(spanId);
}

exports.SPAN_MAP = SPAN_MAP;
exports.clearSpan = clearSpan;
exports.getSentrySpan = getSentrySpan;
exports.setSentrySpan = setSentrySpan;
//# sourceMappingURL=spanMap.js.map
