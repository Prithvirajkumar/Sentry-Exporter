Object.defineProperty(exports, '__esModule', { value: true });

const api = require('@opentelemetry/api');
const core = require('@opentelemetry/core');
const core$1 = require('@sentry/core');
const utils = require('@sentry/utils');
const constants = require('./constants.js');
const spanMap = require('./utils/spanMap.js');

/**
 * Injects and extracts `sentry-trace` and `baggage` headers from carriers.
 */
class SentryPropagator extends core.W3CBaggagePropagator {
  /**
   * @inheritDoc
   */
   inject(context, carrier, setter) {
    const spanContext = api.trace.getSpanContext(context);
    if (!spanContext || !api.isSpanContextValid(spanContext) || core.isTracingSuppressed(context)) {
      return;
    }

    let baggage = api.propagation.getBaggage(context) || api.propagation.createBaggage({});

    const span = spanMap.getSentrySpan(spanContext.spanId);
    if (span) {
      setter.set(carrier, constants.SENTRY_TRACE_HEADER, core$1.spanToTraceHeader(span));

      if (core$1.getRootSpan(span)) {
        const dynamicSamplingContext = core$1.getDynamicSamplingContextFromSpan(span);
        baggage = Object.entries(dynamicSamplingContext).reduce((b, [dscKey, dscValue]) => {
          if (dscValue) {
            return b.setEntry(`${utils.SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`, { value: dscValue });
          }
          return b;
        }, baggage);
      }
    }
    super.inject(api.propagation.setBaggage(context, baggage), carrier, setter);
  }

  /**
   * @inheritDoc
   */
   extract(context, carrier, getter) {
    let newContext = context;

    const maybeSentryTraceHeader = getter.get(carrier, constants.SENTRY_TRACE_HEADER);
    if (maybeSentryTraceHeader) {
      const header = Array.isArray(maybeSentryTraceHeader) ? maybeSentryTraceHeader[0] : maybeSentryTraceHeader;
      const traceparentData = utils.extractTraceparentData(header || '');
      newContext = newContext.setValue(constants.SENTRY_TRACE_PARENT_CONTEXT_KEY, traceparentData);
      if (traceparentData) {
        const spanContext = {
          traceId: traceparentData.traceId || '',
          spanId: traceparentData.parentSpanId || '',
          isRemote: true,
          // Always sample if traceparent exists, we use SentrySpanProcessor to make sampling decisions with `startTransaction`.
          traceFlags: api.TraceFlags.SAMPLED,
        };
        newContext = api.trace.setSpanContext(newContext, spanContext);
      }
    }

    const maybeBaggageHeader = getter.get(carrier, constants.SENTRY_BAGGAGE_HEADER);
    const dynamicSamplingContext = utils.baggageHeaderToDynamicSamplingContext(maybeBaggageHeader);
    newContext = newContext.setValue(constants.SENTRY_DYNAMIC_SAMPLING_CONTEXT_KEY, dynamicSamplingContext);

    return newContext;
  }

  /**
   * @inheritDoc
   */
   fields() {
    return [constants.SENTRY_TRACE_HEADER, constants.SENTRY_BAGGAGE_HEADER];
  }
}

exports.SentryPropagator = SentryPropagator;
//# sourceMappingURL=propagator.js.map
