{"version":3,"file":"spanMap.js","sources":["../../../src/utils/spanMap.ts"],"sourcesContent":["import { getRootSpan } from '@sentry/core';\nimport type { Span as SentrySpan } from '@sentry/types';\n\ninterface SpanMapEntry {\n  sentrySpan: SentrySpan;\n  ref: SpanRefType;\n  // These are not direct children, but all spans under the tree of a root span.\n  subSpans: string[];\n}\n\nconst SPAN_REF_ROOT = Symbol('root');\nconst SPAN_REF_CHILD = Symbol('child');\nconst SPAN_REF_CHILD_ENDED = Symbol('child_ended');\ntype SpanRefType = typeof SPAN_REF_ROOT | typeof SPAN_REF_CHILD | typeof SPAN_REF_CHILD_ENDED;\n\n/** Exported only for tests. */\nexport const SPAN_MAP = new Map<string, SpanMapEntry>();\n\n/**\n * Get a Sentry span for a given span ID.\n */\nexport function getSentrySpan(spanId: string): SentrySpan | undefined {\n  const entry = SPAN_MAP.get(spanId);\n  return entry ? entry.sentrySpan : undefined;\n}\n\n/**\n * Set a Sentry span for a given span ID.\n * This is necessary so we can lookup parent spans later.\n * We also keep a list of children for root spans only, in order to be able to clean them up together.\n */\nexport function setSentrySpan(spanId: string, sentrySpan: SentrySpan): void {\n  let ref: SpanRefType = SPAN_REF_ROOT;\n\n  const rootSpanId = getRootSpan(sentrySpan)?.spanContext().spanId;\n\n  if (rootSpanId && rootSpanId !== spanId) {\n    const root = SPAN_MAP.get(rootSpanId);\n    if (root) {\n      root.subSpans.push(spanId);\n      ref = SPAN_REF_CHILD;\n    }\n  }\n\n  SPAN_MAP.set(spanId, {\n    sentrySpan,\n    ref,\n    subSpans: [],\n  });\n}\n\n/**\n * Clear references of the given span ID.\n */\nexport function clearSpan(spanId: string): void {\n  const entry = SPAN_MAP.get(spanId);\n  if (!entry) {\n    return;\n  }\n\n  const { ref, subSpans } = entry;\n\n  // If this is a child, mark it as ended.\n  if (ref === SPAN_REF_CHILD) {\n    entry.ref = SPAN_REF_CHILD_ENDED;\n    return;\n  }\n\n  // If this is a root span, clear all (ended) children\n  if (ref === SPAN_REF_ROOT) {\n    for (const childId of subSpans) {\n      const child = SPAN_MAP.get(childId);\n      if (!child) {\n        continue;\n      }\n\n      if (child.ref === SPAN_REF_CHILD_ENDED) {\n        // if the child has already ended, just clear it\n        SPAN_MAP.delete(childId);\n      } else if (child.ref === SPAN_REF_CHILD) {\n        // If the child has not ended yet, mark it as a root span so it is cleared when it ends.\n        child.ref = SPAN_REF_ROOT;\n      }\n    }\n\n    SPAN_MAP.delete(spanId);\n    return;\n  }\n\n  // Generally, `clearSpan` should never be called for ref === SPAN_REF_CHILD_ENDED\n  // But if it does, just clear the span\n  SPAN_MAP.delete(spanId);\n}\n"],"names":[],"mappings":"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"}